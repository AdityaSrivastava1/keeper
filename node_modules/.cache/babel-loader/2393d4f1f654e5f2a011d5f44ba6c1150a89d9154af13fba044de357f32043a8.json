{"ast":null,"code":"var _jsxFileName = \"E:\\\\webdevelopment (Anglena)\\\\REACTJS\\\\keeper\\\\src\\\\CreateNote.jsx\",\n  _s = $RefreshSig$();\n//createNote.jsx file\nimport React, { useState } from 'react';\nimport './index.css';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateNote = props => {\n  _s();\n  //on double click the note will shrink \n  const [expand, setExpand] = useState(false);\n  const [note, setNote] = useState({\n    title: ' ',\n    content: ' '\n  });\n  const InputEvent = event => {\n    // const value = event.target.value;\n    // const name = event.target.name;\n    //above 2 line could be written as ðŸ‘‡\n    //object destructing\n    const {\n      name,\n      value\n    } = event.target;\n    //jitne bhi note ka previously data hoga vo store hoga \n    setNote(prevData => {\n      return {\n        ...prevData,\n        //name check hoga  ki name content k equal hai ya title k\n        // agr equal ho jata hai toh us name s related jo bhi value hai vo paste ho jaega yahan pr\n        [name]: value\n      };\n    });\n    console.log(note);\n  };\n  const addEvent = () => {\n    props.passNote(note);\n    setNote({\n      title: ' ',\n      content: ' '\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" main_note\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [\"expand?\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: note.title,\n          onChange: InputEvent,\n          name: \"title\",\n          placeholder: \"Title\",\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this), \":null\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \" \",\n          column: \" \",\n          value: note.content,\n          onChange: InputEvent,\n          name: \"content\",\n          placeholder: \"Write a note...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: addEvent,\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {\n            className: \" plus_sign\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(CreateNote, \"iCjLO1icbARRuJepVOAmO7q0gh8=\");\n_c = CreateNote;\nexport default CreateNote;\nvar _c;\n$RefreshReg$(_c, \"CreateNote\");","map":{"version":3,"names":["React","useState","Button","AddIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateNote","props","_s","expand","setExpand","note","setNote","title","content","InputEvent","event","name","value","target","prevData","console","log","addEvent","passNote","children","className","type","onChange","placeholder","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","rows","column","onClick","_c","$RefreshReg$"],"sources":["E:/webdevelopment (Anglena)/REACTJS/keeper/src/CreateNote.jsx"],"sourcesContent":["//createNote.jsx file\r\nimport React, {useState} from 'react';\r\nimport './index.css'\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\n\r\n\r\nconst CreateNote = (props) => {\r\n  //on double click the note will shrink \r\n  const[expand , setExpand] = useState(false);\r\n    const[note , setNote] = useState( {\r\n       title :' ',\r\n       content : ' ',\r\n    });\r\n\r\n    const InputEvent = (event) => {\r\n\r\n      // const value = event.target.value;\r\n      // const name = event.target.name;\r\n      //above 2 line could be written as ðŸ‘‡\r\n      //object destructing\r\n      const { name, value} = event.target;\r\n      //jitne bhi note ka previously data hoga vo store hoga \r\n      setNote((prevData) =>{\r\n        return {\r\n          ...prevData,\r\n\r\n          //name check hoga  ki name content k equal hai ya title k\r\n          // agr equal ho jata hai toh us name s related jo bhi value hai vo paste ho jaega yahan pr\r\n          [name] : value,\r\n\r\n        }\r\n      });\r\n\r\n      console.log(note);\r\n    };\r\n\r\n    const addEvent =() =>{\r\n   props.passNote(note);\r\n   setNote({\r\n    title: ' ',\r\n    content : ' ',\r\n   })\r\n    }\r\n\r\n  return (\r\n    <>\r\n      <div className=' main_note'>\r\n      <form>\r\n      expand?\r\n\r\n        <input type = \"text\" \r\n        value={note.title}\r\n         onChange={InputEvent}\r\n          name = \"title\"\r\n          placeholder='Title' \r\n          autoComplete = 'off' />\r\n\r\n          :null\r\n\r\n        <textarea rows=' ' \r\n        column = ' ' \r\n        value={ note.content} \r\n        onChange={InputEvent}\r\n        name = 'content'\r\n         placeholder='Write a note...'> \r\n         </textarea>\r\n\r\n        <Button onClick={addEvent}>\r\n            <AddIcon  className =\" plus_sign\" />\r\n        </Button>\r\n       \r\n      </form>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default CreateNote;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,aAAa;AACpB,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAI9C,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5B;EACA,MAAK,CAACC,MAAM,EAAGC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAK,CAACY,IAAI,EAAGC,OAAO,CAAC,GAAGb,QAAQ,CAAE;IAC/Bc,KAAK,EAAE,GAAG;IACVC,OAAO,EAAG;EACb,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAE5B;IACA;IACA;IACA;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;IACnC;IACAP,OAAO,CAAEQ,QAAQ,IAAI;MACnB,OAAO;QACL,GAAGA,QAAQ;QAEX;QACA;QACA,CAACH,IAAI,GAAIC;MAEX,CAAC;IACH,CAAC,CAAC;IAEFG,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;EACnB,CAAC;EAED,MAAMY,QAAQ,GAAEA,CAAA,KAAK;IACtBhB,KAAK,CAACiB,QAAQ,CAACb,IAAI,CAAC;IACpBC,OAAO,CAAC;MACPC,KAAK,EAAE,GAAG;MACVC,OAAO,EAAG;IACX,CAAC,CAAC;EACD,CAAC;EAEH,oBACEX,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACEtB,OAAA;MAAKuB,SAAS,EAAC,YAAY;MAAAD,QAAA,eAC3BtB,OAAA;QAAAsB,QAAA,GAAM,SAGJ,eAAAtB,OAAA;UAAOwB,IAAI,EAAG,MAAM;UACpBT,KAAK,EAAEP,IAAI,CAACE,KAAM;UACjBe,QAAQ,EAAEb,UAAW;UACpBE,IAAI,EAAG,OAAO;UACdY,WAAW,EAAC,OAAO;UACnBC,YAAY,EAAG;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,SAIzB,eAAA/B,OAAA;UAAUgC,IAAI,EAAC,GAAG;UAClBC,MAAM,EAAG,GAAG;UACZlB,KAAK,EAAGP,IAAI,CAACG,OAAQ;UACrBc,QAAQ,EAAEb,UAAW;UACrBE,IAAI,EAAG,SAAS;UACfY,WAAW,EAAC;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC,eAEZ/B,OAAA,CAACH,MAAM;UAACqC,OAAO,EAAEd,QAAS;UAAAE,QAAA,eACtBtB,OAAA,CAACF,OAAO;YAAEyB,SAAS,EAAE;UAAY;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF;EAAC,gBACN,CAAC;AAEP,CAAC;AAAA1B,EAAA,CAtEKF,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AAuEhB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}